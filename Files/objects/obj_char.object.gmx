<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vis_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIAL VARIABLES

x = room_width/2
y = (global.width*928)/1024
sprite_index =  spr_char_run
//sprite_tween(spr_char_run,0)
image_speed =   0.2

shoot_max =     20 //6
shoot_speed =   10 //40 //Steps it takes to refill once
shoot_count =   shoot_max //No. of bullets it'll be able to throw
shoot_able =    1
shoot_fill =    0 //For checking if it should be filling
move_able =     true
lane =          4
move_max =      (global.width*4)/1024

z = 0

audio_listener_orientation(0,1,0,0,0,1); //Audio "ear"

//For jumping
zspeed = 0 //-10
zmin = 0    //-12
grav = (global.width*0.5)/1024
jumping = false
fastfall = false
slide = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slide = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BULLET REFILL
shoot_count += 1
if shoot_count != shoot_max
    alarm[1] = shoot_speed
else
    shoot_fill = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ALLOWS NEXT SHOT
shoot_able = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Depth
depth = -y //Avoids the transparent square over the sprite

//Slows down movevemnt on attack
if keyboard_check_released(vk_space)
    move_max = (global.width*4)/1024
if keyboard_check_pressed(vk_space)
    move_max = ((global.width*4)/1024)/2
    
audio_listener_position(x, y, z); //Audio "ear" position update
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTER MOVEMENT
if (os_type = os_windows || os_type = os_macosx)
{

//&lt;GRID MOVEMENT&gt;    
if obj_cam.movement_mode = "grid"
    {
    
    //Push    
    if move_able = true
        {
        if (keyboard_check(ord("A")) || keyboard_check(vk_left))
            if lane != 1
            {
            move_able = false
            lane --
            x -= 32
            }
        if (keyboard_check(ord("D")) || keyboard_check(vk_right))
            if lane != 7
            {
            move_able = false
            lane ++
            x += 32
            }
        }
    
    //Unpush
    if (keyboard_check_released(ord("A")) || keyboard_check_released(vk_left) || keyboard_check_released(ord("D")) || keyboard_check_released(vk_right))
        if move_able = false
            move_able = true
    }

//&lt;FREE MOVEMENT&gt;    
if obj_cam.movement_mode = "free"
    {
    if (keyboard_check(ord("A")) || keyboard_check(vk_left))
        x -= move_max+slide
    if (keyboard_check(ord("D")) || keyboard_check(vk_right))
        x += move_max+slide
    }

    
//Attack rebinding
if keyboard_check_pressed(ord('X'))
    keyboard_key_press(vk_space)   
if keyboard_check_released(ord('X'))
    keyboard_key_release(vk_space)  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SMARTPHONE MOVEMENT
if (os_type = os_android || os_type = os_ios)
    {
    //Tilt
    if device_get_tilt_y() &lt; 0
        motion = device_get_tilt_y()*40-slide
    else
        motion = device_get_tilt_y()*40+slide
        
    if motion &gt; 4
        motion = 4+slide
    if motion &lt; -4
        motion = -4-slide
    x += motion
    
    //Click
    if mouse_check_button_pressed(mb_left)
        {
        //if mouse_x &lt; view_wport[0]/6 //Left
            //keyboard_key_press(vk_left)
        //if mouse_x &gt; view_wport[0]/6 &amp;&amp; mouse_x &lt; view_wport[0]/2 //Right
            //keyboard_key_press(vk_right)
        if mouse_x &gt; view_wport[0]/2 //Shoot
            keyboard_key_press(vk_space)
        if mouse_x &lt; view_wport[0]/2 //Jump
            keyboard_key_press(ord('Z'))
        }

    //Unclick    
    if mouse_check_button_released(mb_left)
        {
        keyboard_key_release(vk_left)
        keyboard_key_release(vk_right)
        keyboard_key_release(vk_space)
        keyboard_key_release(ord('Z'))
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTROLLER MOVEMENT
if gamepad_is_connected(0)
    {   
    if (gamepad_axis_value(0, gp_axislh) &lt; -0.3 || gamepad_axis_value(0, gp_axislh) &gt; 0.3)  //L-STICK
        if gamepad_axis_value(0, gp_axislh) &lt; 0
            x += gamepad_axis_value(0, gp_axislh)*4-slide
        else
            x += gamepad_axis_value(0, gp_axislh)*4+slide
    
    if gamepad_button_check_pressed(0,gp_shoulderl) //L-SHOULDER SHOOT
        keyboard_key_press(vk_space)
    if gamepad_button_check_released(0,gp_shoulderl)
        keyboard_key_release(vk_space)
        
    if gamepad_button_check_pressed(0,gp_shoulderr) //R-SHOULDER SHOOT
        keyboard_key_press(vk_space)
    if gamepad_button_check_released(0,gp_shoulderr)
        keyboard_key_release(vk_space)
        
    if gamepad_button_check_pressed(0,gp_shoulderlb) //L-SHOULDER-B SHOOT
        keyboard_key_press(vk_space)
    if gamepad_button_check_released(0,gp_shoulderlb)
        keyboard_key_release(vk_space)
        
    if gamepad_button_check_pressed(0,gp_shoulderrb) //R-SHOULDER-B SHOOT
        keyboard_key_press(vk_space)
    if gamepad_button_check_released(0,gp_shoulderrb)
        keyboard_key_release(vk_space)
        
    if gamepad_button_check_pressed(0,gp_face1) //A-BUTTON SHOOT
        keyboard_key_press(ord('Z'))
    if gamepad_button_check_released(0,gp_face1)
        keyboard_key_release(ord('Z'))
        
    if gamepad_button_check_pressed(0,gp_face2) //B-BUTTON SHOOT
        keyboard_key_press(vk_space)
    if gamepad_button_check_released(0,gp_face2)
        keyboard_key_release(vk_space)
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping

if keyboard_check_pressed(ord('Z'))
    if jumping = false
        {
        zspeed = (global.width*-7)/1024 //-7
        jumping = true
        }
    else
        {
        zspeed = (global.width*12)/1024
        fastfall = true
        }

if z &gt; zmin
    {
    zspeed += grav
    }
    
z -= zspeed

if z &lt;= zmin
    {
    zspeed = 0
    z = zmin
    jumping = false
    if fastfall = true
        {
        fastfall = false
        slide = (global.width*6)/1024
        alarm[2] = 8
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boundaries
if x &lt; 12
    x = 12
if x &gt; room_width-12
    x = room_width-12
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOOTS ONCE
if shoot_count != 0
    if shoot_able = 1
        {
        instance_create(x,y,obj_char_bullet)
        shoot_count -= 1
        shoot_able = 0
        alarm[0] = 5
        if shoot_fill = 0
            {
            alarm[1] = shoot_speed
            shoot_fill = 1
            }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW

draw_set_color(c_black) //Shadow color
d3d_draw_floor(x-((global.width*12)/1024),y-((global.width*24)/1024),1,x+((global.width*12)/1024),y,1,sprite_get_texture(sprite_index,image_index),1,1)

draw_set_color(c_white) //Normal sprite
d3d_draw_wall(x-((global.width*12)/1024),y,z+((global.width*24)/1024),x+((global.width*12)/1024),y,z+0,sprite_get_texture(sprite_index,image_index),1,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
