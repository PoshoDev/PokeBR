<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cacnea</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!irandom_range(0, 64))
    shiny = "_shiny";
else
    shiny = "";
/*do
{
    scr_dex(irandom_range(0, 1129));
    
    pkmn = string_lower(name);
    if (form != "")
        pkmn = string_insert(string_lower(form), pkmn+"_", string_length(pkmn)+2);
    
    spr1 = make_sprite("Sprites\"+pkmn+shiny+".png");
    spr2 = make_sprite("Sprites\"+pkmn+shiny+"_back"+".png");
}
until (sprite_exists(spr1) &amp;&amp; sprite_exists(spr2))*/

do
{
    make_pokemon(irandom_range(global.dex_min, global.dex_max));
}
until (phase==1 &amp;&amp; sprite_exists(spr1) &amp;&amp; sprite_exists(spr2))

if (sprite_exists(sprite_index) == false)
    sprite_index = spr_block;
else
    sprite_index = spr1;

h_dir = -1;
v_dir = 1;

alarm[0] = 15;
action = actions.idle;

mask_index = spr_hitbox;

show_debug_message("SPAWNED: "+pkmn);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATS

lv = 50;
xp = 0;
evolve = false;

battle = false;
battle_vs = noone;

stat_set_hp();
stat_set_atk();
stat_set_def();
stat_set_spatk();
stat_set_spdef();
stat_set_spd();

hp_current = hp;

pocket_no = 0;

for(i=0; i&lt;8; i++)
    pocket[i] = -1;
  
consuming_id = -1;  
consuming_slot = -1;
cons = 0;

partic = -1;
    
level_get_texutre(lv);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DUMB TRAITS
/*
if (instance_number(obj_pokemon) == 1)
{
    x = -128;
    y = room_height/2;
    
    action = actions.idle;
    alarm[0] = -1;
    
    name = "eelektrik";
    image_xscale = -1;
    
    spr1 = make_sprite("Sprites\"+string_lower(name)+".png");
spr2 = make_sprite("Sprites\"+string_lower(name)+"_back"+".png");

pow = sprite_get_height(spr1);

if (sprite_exists(sprite_index) == false)
    sprite_index = spr_block;
else
    sprite_index = spr1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ENUM &amp; OTHER VARIABLES

enum actions
{
    idle,
    walk,
    pickup,
    useitem,
    evolve
}

enum inter
{
    attack
}

bump_doing =    false
bump_scale =    0

evo_sx = 0;
evo_sy = 0;

color = c_white;
color_hp = c_green;
shake = 0;

checked = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Damage Color
color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PARTICLES END

partic = -1;
consuming_id = -1;
consuming_slot = -1;
cons = 0;

if (color != c_red)
    color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  PARTICLES

if (partic != -1)
{
    var mult = 1;
    if (rand(0, 1))
        mult *= -1;
       
    part = instance_create(x, y, obj_particle)
    part.type = partic;
    part.sprite_index = particle_get_type(partic);
    part.owner = self;
    part.px = rand(-pow/2, pow/2);
    part.py = (rand(2, 8) * mult);
    
    alarm[1] = 60*2/20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A.I.

action = actions.idle;
speed = 0;

if (battle)
    ai_battle();
else
    ai_explore();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ACTIONS

switch(action)
{
    case actions.idle:
    break;
    
    case actions.walk:        
        action_doing_walk();
    break;
    
    case actions.pickup:        
        action_doing_pickup();
    break;
    
    case actions.useitem:
    break;
    
    case actions.evolve:
        action_doing_evolve();
    break;
}

if (battle)
{
    if (instance_exists(battle_vs))
        orientation_get(battle_vs.x, battle_vs.y);
    else
    {
        battle_vs = noone;
        battle = false;
        obj_cam.fix = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SPRITE_BUMP &amp; SHAKE &amp; CONS

sprite_bump_check();

if shake &gt; 0
    shake --
    
if (consuming_id != -1)
    cons += 1/8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXP &amp; LEVEL UP

var check = false;

xp += base_xp/60/60      *8;

while (xp &gt;= base_xp)
{
    lv++;
    
    xp -= base_xp;
    
    base_xp = power(base_xp, 1.2);
    
    check = true;
}

if (check)
{
    stat_set_hp_lvlup();
    stat_set_atk();
    stat_set_def();
    stat_set_spatk();
    stat_set_spdef();
    stat_set_spd();
    
    level_get_texutre(lv); 
    
    // Evolution
    if (evo_lv != "")
    {
        var hold = real(evo_lv);
        
        if (string(hold) == string(evo_lv))
        {
            // It's an integer.
            if (lv &gt;= hold)
                evolve = true;
        }
        else
        {
            // It's a string.
            if (chance(lv))
                evolve = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW

if (sprite_exists(sprite_index) == false)
    sprite_index = spr_block;

// Pokémon
draw_set_color(color);
d3d_draw_wall(  /* x1 */    x-(pow/2*image_xscale)+irandom_range(-shake,shake)-evo_sx,
                /* y1 */    y,
                /* z1 */    pow-bump_scale+irandom_range(-shake,shake)/*+cos(cons)*pow/2*/+evo_sy,
                /* x2 */    x+(pow/2*image_xscale)+irandom_range(-shake,shake)+evo_sx,
                /* y2 */    y,
                /* z2 */    0+irandom_range(-shake,shake),
                            sprite_get_texture(sprite_index, image_index), 1, 1);
// Shadow
draw_set_color(c_black)
draw_ellipse(x-(pow/4), y-(pow/8), x+(pow/4), y+(pow/8), false);

draw_set_alpha(0.75);
draw_set_color(c_white)

// HP Bar
if (debug_mode || obj_cam.target.id != id)
{
    //draw_set_color(c_black);
    d3d_draw_wall(x-32, y+1, pow, x+32, y+1, pow-8, sprite_get_texture(spr_source_3d, 8), 1, 1);
    
    //draw_set_color(color_hp);
    d3d_draw_wall(x-32, y+2, pow, x-32+hp_current/hp*64, y+2, pow-8, sprite_get_texture(spr_source_3d, hp_bar_get_self()), 1, 1);
    
    
    // EXP Bar
    /*draw_set_color(c_gray);
    d3d_draw_wall(x-32, y+1, pow-8, x+32, y+1, pow-12, tex_square, 1, 1);
    
    draw_set_color(c_teal);
    d3d_draw_wall(x-32, y+2, pow-8, x-32+xp/base_xp*64, y+2, pow-12, tex_square, 1, 1);*/
    
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    
    
    // LV.
    d3d_draw_wall(x-32, y+3, pow, x+32, y+3, pow+64, lv_tex, 1, 1);
}


// Consuming Item
if (consuming_id != -1)
{
    draw_set_alpha(0.5)
    d3d_draw_wall(x-8+(8*cos(cons)), y+5, cons*4+16+8, x+8+(8*cos(cons)), y+5, cons*4+16-8, sprite_get_texture(item_get_sprite(consuming_id), 0), 1, 1);
    draw_set_alpha(1);
}


draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
